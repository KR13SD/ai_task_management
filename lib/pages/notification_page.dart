import 'package:flutter/material.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:get/get.dart';
import '../controllers/auth_controller.dart';

class NotificationsPage extends StatelessWidget {
  final AuthController authController = Get.find<AuthController>();

  @override
  Widget build(BuildContext context) {
    final uid = authController.currentUser?.uid;
    if (uid == null) {
      return const Scaffold(
        body: Center(child: Text("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö")),
      );
    }

    final now = DateTime.now();
    final deadline = now.add(const Duration(days: 2)); // ‡∏á‡∏≤‡∏ô‡πÉ‡∏Å‡∏•‡πâ‡∏ñ‡∏∂‡∏á‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏†‡∏≤‡∏¢‡πÉ‡∏ô 2 ‡∏ß‡∏±‡∏ô

    print("üìå Query Notifications: uid=$uid, now=$now, deadline=$deadline");

    return Scaffold(
      appBar: AppBar(
        title: const Text("üîî ‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô"),
        backgroundColor: Colors.deepPurple,
      ),
      body: StreamBuilder<QuerySnapshot>(
        stream: FirebaseFirestore.instance
            .collection('tasks')
            .where('uid', isEqualTo: uid)
            .where('endDate', isGreaterThanOrEqualTo: now) // ‚úÖ ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏á‡∏≤‡∏ô‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏
            .where('endDate', isLessThanOrEqualTo: deadline)
            .orderBy('endDate')
            .snapshots(),
        builder: (context, snapshot) {
          if (snapshot.connectionState == ConnectionState.waiting) {
            return const Center(child: CircularProgressIndicator());
          }
          if (snapshot.hasError) {
            return Center(child: Text("‚ö†Ô∏è Error: ${snapshot.error}"));
          }

          if (!snapshot.hasData || snapshot.data!.docs.isEmpty) {
            print("üì≠ ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏á‡∏≤‡∏ô‡πÉ‡∏Å‡∏•‡πâ‡∏Ñ‡∏£‡∏ö‡∏Å‡∏≥‡∏´‡∏ô‡∏î");
            return const Center(
              child: Text("üéâ ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏Å‡∏•‡πâ‡∏Ñ‡∏£‡∏ö‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÉ‡∏ô 2 ‡∏ß‡∏±‡∏ô"),
            );
          }

          final tasks = snapshot.data!.docs; // ‡πÉ‡∏ä‡πâ‡∏ï‡∏£‡∏á‡πÜ ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á sort

          print("‚úÖ ‡∏î‡∏∂‡∏á‡πÑ‡∏î‡πâ ${tasks.length} ‡∏á‡∏≤‡∏ô");

          return ListView.separated(
            padding: const EdgeInsets.all(16),
            itemCount: tasks.length,
            separatorBuilder: (_, __) => const SizedBox(height: 12),
            itemBuilder: (context, index) {
              final task = tasks[index].data() as Map<String, dynamic>;
              final endDate = (task['endDate'] as Timestamp).toDate();

              print("‚û°Ô∏è Task: ${task['title']} | endDate=$endDate");

              return Container(
                padding: const EdgeInsets.all(16),
                decoration: BoxDecoration(
                  color: Colors.orange[50],
                  borderRadius: BorderRadius.circular(16),
                  border: Border.all(color: Colors.orangeAccent, width: 1),
                ),
                child: Row(
                  children: [
                    const Icon(Icons.access_time_filled, color: Colors.orange, size: 32),
                    const SizedBox(width: 16),
                    Expanded(
                      child: Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          Text(
                            task['title'] ?? "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠",
                            style: const TextStyle(
                              fontWeight: FontWeight.bold,
                              fontSize: 16,
                              color: Colors.black87,
                            ),
                          ),
                          const SizedBox(height: 6),
                          Text(
                            "‡∏Ñ‡∏£‡∏ö‡∏Å‡∏≥‡∏´‡∏ô‡∏î: ${endDate.toString().substring(0, 16)}",
                            style: const TextStyle(
                              fontSize: 14,
                              color: Colors.redAccent,
                            ),
                          ),
                        ],
                      ),
                    ),
                  ],
                ),
              );
            },
          );
        },
      ),
    );
  }
}
